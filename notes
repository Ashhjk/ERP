________ERP________

ERP (Enterprise Resource Planning) is a type of software used by organizations to manage and integrate their core business processes. It provides a centralized system to collect, store, and manage data across various functions of an organization, ensuring streamlined workflows and improved efficiency.
Common Modules in ERP:

    Finance and Accounting: Tracks income, expenses, and financial reporting.
    Human Resources (HR): Manages employee data, payroll, and recruitment.
    Supply Chain Management: Oversees procurement, inventory, and logistics.
    Customer Relationship Management (CRM): Helps manage customer data and improve interactions.
    Manufacturing: Tracks production schedules and quality control.
    Sales and Marketing: Monitors sales pipelines and marketing campaigns
eg of ERP:
1.SAP
2.Microsoft
3.Infor

SAP is an erp produced by the company SAP.

________ABAP(Advanced Business Application Programming)_______
*its a high level programming language created by sap which help companies in customising the sap erp.
*Abap allows companies in customising the workflow ofvarious sap modules like financial accounting ,asset management, material management etc.
*it was developed by sap for writing sap applications 
*sap aaplications like S/4HANA ,ECC,Crm etc are created using the ABAP programming language.
*But some of the sap applications like SuccessFactors,Ariba,Concur,FieldGlass ,BTP etc are cloud SAPs..means they are not written using the ABAP..instead they are written using java , nodejs etc

____________________SAP ABAP PLATFORM FUNDAMENTALS__________________
**************different types of sap software applications****************
1.APPLICATION SOFTWARE
SAP ERP,SAP S/4 HANA : end to end application covering all the business processes
2.REPORTS AND ANALYTICS
tools that help in providing business analytics and reports
3.MOBILE ACCESS
eg: SAP FIORI they are the mobile applications so that the sap applications can be accessed anywhere
4.DBMS
eg:SAP HANA saps 
primary dbms is sap hana
5.CLOUD SOLUTIONS
Delivery of SAP solutions over the cloud, eliminating the need for on-premises infrastructure.
Includes SAP Business Technology Platform (BTP), SAP HANA Cloud, and SAP SuccessFactors.

*****SAP S/4HANA is next gen erp of sap...it allows the flow of information between various business f
unctions

******************HISTORY OF SAP's ERP***************
R2-> R3(business suite or ECC)-> Business Bydesign ->S/4 HANA

_____________SAP's 3 TIERED ARCHITECTURE______________
consist of three layers
1.presentation layer(web browser-sap fiori,business client,sap GUI)
2.Application layer
3.database layer (ABAP- SAP HANA database)

*Application and database layers can run on same hosts but possible only in case of smaller businesses ...for larger businesses both run on different hosts
     **********Database layer*********
SAP HANA database is used...while installing and running the sap application databases are created by default
*Application layer consist of numerous objects and logics
*presentation layer is available to the end user
_____________APPLICATION LAYER___________
ABAP platform is the application layer
*It includes various business processses like finance ,sales etc and also custom applications everything resides here
*Advanced Business Application Programming (ABAP) is the programming language that is used to build custom applications for the application layer
**********ABAP PLATFORM FUNCTIONS************
1.act as an application run time environment
2.act as a application development environment
3.used to build custom appplications
4.used for integration and data management platform
5.security platform
6.reporting platform

   ========> Application run time environment
act as the middle tier between the presentation and the databse layer
*ABAP based application are run on this platform
*it provides a secure platform
*application processing,troubleshooting and optimisation 

   ========> Application development environment
*helps to build responsive  applications using SAP UI5 for frontend and WebDinpro ABAP

   ========>Built in source management system
* custom code respository is there developed by sap...many developers can contribute to it at the same time and work on it simultaneously
*conflict resolution also ther like git 

   ========> Integration tools
*there are many integration tools  for ensuring coonrcativity btw different tools and applications 
*Remote Function Call Protocol(RFC) is one such integration tool...by using this functions can be  called in remote applications or even non sap systems
*Business Application Programming Interface(BAPI) connect between other external applications
*data integration converts the data from one form to another

   ========>Application security
using authentication to protect the application
   =========>Reports
get reports and analyses very easily
*ABAP LIST VIEWER(ALV) is one tool for creating aesthetic reports  in that we can sort and filter
*SAP crystal reports also a  tool supports advanced features like charting and advanced formulas

For each sap system there is a unique system id called SID.
Its alphanumeric
Start with uppercase
Only 3 letters

___________________SAP INSTANCE________________
we can think it as a work unit inside the sap system..they are doing specific jobs and services
*each sap instance run on a host..
*many instances can be run on the same host provided each of the instnaces should have unique SID and also a 2 digit instance number to uniquely identify the instance.
Types of Instances:

    Primary Application Server (PAS): The first instance created during installation. It’s the main worker for running the SAP system.
    Additional Application Server (AAS): Extra instances added to share the workload and handle more users or tasks.
    ABAP Central Services Instance (ASCS): A special instance that handles centralized services like communication and synchronization between other instances.

*Application layer consist of so many application instances and one instace for central services.
*the primary appllication server or instance is used at the time of installation
*every instance has a DISPATCHER
*each instance can be mapped to particular id
*dispatcher manages the processes and ensures workload is evenly distributed
*dispatcher checks the health of the processes and start or stop a process if necessaaary

______________WORK PROCESSES OF A DISPATCHER_________________
1. Dialog work process
whenever the user makes a request for some resources the dialog work process does this
*it executes the request ,get the data from the db and give it to the user
*manages the allocation of resources like memory and cpu so that multiple requests can be handled simultaneously

2.Batch work process
to perform background tasks 
*report generation
*non interactive process not interating with the users
*executes long running tasks
*helps in job scheduling so that the users can set to run the most important tasks first

3.Spool work process
*its used for printing
*when someone generates the spool request the request is stored in the database and then generate the output request for print devices

4. Update work process
*it manages an update queue
*when an sap process is completed it is the update request that updates the db

there are many application server instances in the application layer also there are centrak services etc

________________ABAP APPLICATION PROCESSING STEPS___________________

1. when a user logs on to the SAP system they the SAP GUI (user interface ) puts a request into the message server in the application layer.
2. then it looks for the application server with the most available resources.
3. on finding the  available application server the message server sends the message to the GUI to connect to the dispatcher of that particular server
4.then the connection from the message server is terminated and now connected to the application server
5.authentication request including the users credentials is passed to the AS
6. users request is put in wait queue
7. its managed in first in first out basis
8. when its right time the request is given to dialog work process of dispatcher because the users request is an interactive process
eg:suppose a user want to log in to the sap system then the task handler in the dispatcher sends checks the application program buffer for the data
and then load the data from the database and bring it to the dialog work process and store it in the memory
*if the user is login for the first time then his credentials wont be in the buffer...so they task handler looks for the data in the database and fulfills the request

_________________INTERNET COMMUNICATION MANAGER________________
INTERNET COMMUNICATION Manager assisgns the incoming https requests to the application server and the dispatcher based on looking the load and the schedule so that no application server is over;loaded
_________________SAP web dispatcher____________
What is the SAP Web Dispatcher?

    It’s like a traffic controller for web requests.
    When a user accesses an SAP system from a browser, the request first goes to the Web Dispatcher, which decides where to send it within the SAP environment.

What does it do?

    Gateway and Load Balancer:
        It acts as the single point of entry for all user requests.
        Balances the workload by distributing requests to different servers in the SAP system, ensuring none are overloaded.

    Security:
        It acts as a reverse proxy, meaning it hides the internal structure of the SAP systems from external users.
        Filters and modifies requests to ensure only valid ones are forwarded to SAP systems.

    Request Routing:
        Decides where to send each request based on rules, such as the host, port, or specific URL paths.

    Scalability:
        Handles large amounts of traffic and supports complex enterprise systems with multiple users and servers.

    Single Sign-On (SSO):
        Allows users to log in once and access multiple SAP systems without having to log in again for each one.

    Optimization:
        Handles tasks like SSL termination (encrypting and decrypting communication), caching data, and compressing content to improve speed.

How it Works:

    A user accesses an SAP application using a browser.
    The request is sent to the SAP Web Dispatcher.
    The Web Dispatcher:
        Checks rules to decide which back-end server should handle the request.
        Balances the load between servers to avoid overloading any single server.
        Sends the request to the chosen server for processing.
    The processed response is sent back to the user through the Web Dispatcher.
*Till now we have seen the user login request, now we can see how a transaction is processed..transaction means some kind of request from the user

______________________TRANSACTION PROCESSING____________________
1. processing a dialog request
2.definingan ABAP transaction
3.database interaction
4.Lock managemnet
5. update processing

 =====> Processing a dialogue request
Processing a Dialog Request in SAP

When a user interacts with an SAP application, the system follows a structured approach to handle their input and provide a response. Here’s a simplified explanation:
Key Concepts:

    Dialog Work Processes:
        These are the components on the application server that handle user requests.
        When a user performs an action (e.g., clicking a button or entering data), the dialog work process executes a corresponding dialog step.

    Dialog Steps:
        Each user action (e.g., clicking, submitting) is a dialog step, which involves processing logic, retrieving/manipulating data, and sending a response.
        These steps are small tasks, and multiple dialog steps can occur in a single transaction.
        Different dialog steps for the same user may be processed by different work processes. This is called work process multiplexing.

    Dynpros (Dynamic Programs):
        SAP screens are called dynpros, consisting of:
            Screen image: What the user sees.
            Flow logic: The rules defining how the screen behaves and interacts with data.

    PBO and PAI:
        Each screen follows two key stages:
            PBO (Process Before Output): Prepares the screen and its data before it’s displayed to the user.
            PAI (Process After Input): Processes user inputs after the user interacts with the screen.

How It Works:

    User Action:
    The user interacts with the system (e.g., enters data and clicks a button).

    Processing by the Dynpro Processor:
        The dynpro processor handles the screen logic and:
            Executes the PBO step to prepare the screen and data.
            Sends the screen to the user.

    User Interaction with Screen:
        The user interacts with the screen (e.g., entering values or pressing a button).
        The system triggers the PAI step, which processes the user input.

    ABAP Processor Execution:
        Based on the screen flow logic, the ABAP processor executes the required code or subprogram.
        If database access is needed, the database interface of the dialog work process handles it.

    Response to User:
        Once the processing is complete, a response is sent to the user (e.g., updated data or a new screen).

Example Scenario:

    A user opens a screen to update their contact information.
    The PBO step retrieves the current contact details and displays them on the screen.
    The user modifies their phone number and clicks “Save.”
    The PAI step processes the user input, validates the data, and updates the database.
    The system confirms the update and sends a success message back to the user.
________________Defining an SAP Transaction________________

An SAP transaction is typically made up of multiple dialog steps. These dialog steps, or processing units, are grouped together to generate a specific business result. For example, the creation of a financial document or a sales order. A transaction must satisfy the ACID test and is characterized by the following four attributes:

    Atomic: Atomic means that a transaction is either fully successful or does not have any effects at all. If a transaction-oriented system goes down, you need to ensure that inconsistent, partial results are not stored.
    Consistent: Consistent means that the system status changes from one that is accurate and consistent in business terms to another that is also accurate and consistent in business terms.
    Isolated: Isolated means that the changes made within a transaction can only be seen by other transactions, even those that run simultaneously, after the final confirmation (Commit).
    Durable: The results of a transaction are durable because after the final confirmation they are stored permanently in the database.

_____________ECLIPSE IDE____________
ABAP perspective
F1 - help about statement
F2- definition of statement
F3- definition of object

*we create development object in abap environment
*then on creation of these objects they are put under the package 
*this set of components is called repository object
*we first develop then test the components and later transport it to production after all these testing works


_______________Allowed in ABAP Class Names___________

    Letters (A-Z, a-z)
        Both uppercase and lowercase letters are allowed, but class names are case-insensitive in ABAP. Typically, uppercase is used by convention.

    Digits (0-9)
        Numbers can be included in the class name, but they cannot be the first character.

    Underscore (_)
        Underscores can be used within the class name to separate words or identifiers. For example, ZCL_MY_CLASS.

    Length
        The maximum length of an ABAP class name is 30 characters.

    Prefixing with Z or Y (for custom objects)
        Custom class names must begin with Z or Y to distinguish them from SAP standard classes.

Not Allowed in ABAP Class Names

    Special Characters
        Characters like $, %, &, #, @, etc., are not allowed.

    Spaces
        Class names cannot contain spaces.

    Starting with a Digit
        The name cannot begin with a number (e.g., 1CL_MYCLASS is invalid).

    Reserved Words
        Names that match reserved keywords in ABAP are not allowed.

    SAP Standard Namespace
        Names that do not start with Z or Y are reserved for SAP standard objects. Creating custom classes without these prefixes can lead to conflicts.

Naming Conventions

    General Structure:
    ZCL_ + descriptive name, e.g., ZCL_ORDER_MANAGEMENT.

    Purpose-Specific Prefixes:
        ZCL_ for classes
        ZIF_ for interfaces
        ZCX_ for exceptions

_____________SYNTAX OF ABAP______________
1.start with a keyword
2.end with a perios (.)
3.not case sensitive usually keywords caps and identifiers lower case or camel case
4.all data objects have static type
5. have built in db ...sql for queries and entity anipuoation language for modifications

___________EXAMPLES OF ABAP STATEMENTS____________
1.DECLARATIVE STATEMENTS
    used to declare a variable
eg:DATA name TYPE c LENGTH 10.        // keywords DATA, TYPE,LENGTH are in caps as they are keywords and the                                           rest are in lowecase as they are identifiers
    DATA text TYPE string.
2.EXECUTABLE STATEMENTS
    CONCATENATE 'Hello' name INTO text.

____________EXAMPLES OF ABAP EXPRESSIONS____________
 1.literal
    text ='Hello'.
2.variable
    text=name.
3.function
    text=replace( val='Hello world'
                sub='world'
                with='name'.)
4.conditional assignment
    text=COND#(WHEN text='' THEN Hello && name ELSE text).

__________________________COMMENTS  IN ABAP________________________
for commentinng aline u can include * in the first coloumn   
    *comment.....
for commenting in between we can use "
     text=name.  "comment.....
for commenting many lines  select those lines and ctrl+<

_______________DATA OBJECTS IN ABAP_____________
1.VARIABLES
    *its value can be changed any time
    *it has a  name
    *using the name it can be called any time 
2.CONSTANTS
    *its value is set by hardcoding
    *it has a name
    *can be called anywhere in the program
3.LITERALS
    *its value can  be set only one time
    *no name
    *cant access it again 

_______________DECLARATION OF VARIABLES_______________

DATA <variable name> TYPE <datatype> VALUE<starting value>
eg:
    DATA my_variable1 TYPE i.
    DATA my_variable1 TYPE string.
    DATA my_variable1 TYPE string VALUE='hello world'. 

======>DATA
    keyword data is used before the variable name 
    variable name  can be max 30 characters
    it can have digits alphabets or underscore
    can start with alphabet or underscore
======>TYPE
    TYPE keyword is followed by the datatype of the variable
    i for integer
    string
======>VALUE
    value is optional 

_____________EXAMPLE OF USING DATATYPE______________

======>STRING
CLASS zcl_data_types1 DEFINITION
  PUBLIC
  FINAL
  CREATE PUBLIC .

  PUBLIC SECTION.

    INTERFACES if_oo_adt_classrun .
  PROTECTED SECTION.
  PRIVATE SECTION.
ENDCLASS.



CLASS zcl_data_types1 IMPLEMENTATION.


  METHOD if_oo_adt_classrun~main.
  DATA x TYPE string.
  out->write( 'this variable is a string' ).
  ENDMETHOD.
ENDCLASS.

=======>INTEGER
  METHOD if_oo_adt_classrun~main.
    DATA x TYPE i.
    x = 42.
    out->write( |{ x }| ).
  ENDMETHOD.
=======>DATES
dates are usually written in yyyymmdd format .
*we can format the date into particular format using the predefined user format for date
*we can also extract the year moth and date from that particular date

  METHOD if_oo_adt_classrun~main.
    DATA birthday TYPE d.
    DATA year TYPE n LENGTH 4.
    DATA month TYPE n LENGTH 2.
    DATA day TYPE n LENGTH 2.
    DATA formatted_date TYPE string.

    birthday = '20120615'.

    formatted_date = |{ birthday DATE = USER }|.

    year = birthday+0(4).
    month = birthday+4(2).
    day = birthday+6(2).

    out->write( |{ formatted_date }| ).
    out->write( |Birthyear is: { year }| ).
    out->write( |Month is:{ month }| ).
    out->write( |Day is:{ day }| ).
  ENDMETHOD.


------->output


06/15/2012
Birthyear is: 2012
Month is:06
Day is:15


*usually indexing start from 0.
*year = birthday+0(4). //birthday + start index (number of                     characters to be extracted)
*month = birthday+4(2).// here indexing start from 4 so that 0,1,2,3 is the year and 4,5 give the month
*day = birthday+6(2). //here indexing start from 6 so that 6,7 gives the day
